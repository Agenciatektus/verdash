
import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Plus, Target, Calculator, DollarSign, TrendingUp, Users, BarChart3, Settings, Zap, Server } from "lucide-react";
import { toast } from "sonner";

const customMetrics = [
  { name: "Custo/lead Meta", value: "R$999,99" },
  { name: "Custo por lead Real - CRM", value: "R$999,99" },
  { name: "Custo por Lead qualificado", value: "R$999,99" },
  { name: "Custo por visita agendada", value: "R$999,99" },
  { name: "Custo por Briefing", value: "R$999,99" },
  { name: "Custo por Desenho de planta", value: "R$999,99" },
  { name: "Custo por Negocia√ß√£o", value: "R$999,99" },
  { name: "Custo por Ap. agendada", value: "R$999,99" }
];

const dataSources = [
  { id: 'meta_ads', name: 'Meta Ads', icon: 'üì±' },
  { id: 'google_ads', name: 'Google Ads', icon: 'üîç' },
  { id: 'crm', name: 'CRM', icon: 'üë•' },
  { id: 'ecommerce', name: 'E-commerce', icon: 'üõí' },
  { id: 'planilha', name: 'Planilha', icon: 'üìä' },
  { id: 'webhook', name: 'Webhook', icon: 'üîó' }
];

const formulaFunctions = [
  'SUM', 'AVG', 'COUNT', 'MIN', 'MAX', 'IF', 'AND', 'OR'
];

const availableMetrics = {
  financeiras: {
    title: "üî• M√©tricas de Receita (Financeiras)",
    icon: DollarSign,
    metrics: [
      "Receita Total",
      "Receita Recorrente Mensal (MRR)",
      "Receita Recorrente Anual (ARR)",
      "Receita Bruta",
      "Receita L√≠quida",
      "Receita por Produto/Servi√ßo",
      "Receita por Cliente (Revenue per Customer)",
      "Receita por Regi√£o",
      "Receita Nova (New Business MRR)",
      "Receita de Expans√£o (Expansion MRR)",
      "Receita por Upgrades",
      "Receita por Upsell",
      "Receita por Cross-sell",
      "Receita de Renova√ß√£o",
      "Receita de Servi√ßos Profissionais",
      "Taxa de Crescimento da Receita (%)",
      "Taxa de Cancelamento de Receita (Churn de Receita)",
      "Lifetime Value (LTV)",
      "Gross Margin (Margem Bruta)",
      "Margem Operacional",
      "Margem de Contribui√ß√£o",
      "ROI (Retorno sobre Investimento)",
      "CAC Payback (Tempo para pagar o CAC)"
    ]
  },
  vendas: {
    title: "üí∏ M√©tricas de Vendas",
    icon: Target,
    metrics: [
      "Total de Propostas Enviadas",
      "Propostas Fechadas",
      "Taxa de Convers√£o por Etapa do Funil",
      "Ciclo M√©dio de Vendas (dias)",
      "Ticket M√©dio de Venda",
      "N√∫mero de Leads Qualificados (SQLs)",
      "Leads Convertidos em Oportunidades",
      "Oportunidades Fechadas",
      "Taxa de Win Rate (Convers√£o)",
      "Taxa de Loss Rate (Perda)",
      "Receita por Vendedor",
      "Performance por Vendedor",
      "N√∫mero de Reuni√µes Realizadas",
      "N√∫mero de Demonstra√ß√µes",
      "Taxa de Follow-up Realizado",
      "Leads Gerados por Canal"
    ]
  },
  marketing: {
    title: "üìà M√©tricas de Marketing",
    icon: TrendingUp,
    metrics: [
      "Custo por Lead (CPL)",
      "Custo por Mil Impress√µes (CPM)",
      "Custo por Clique (CPC)",
      "Custo por Aquisi√ß√£o (CPA)",
      "Custo por MQL (Marketing Qualified Lead)",
      "Leads Gerados",
      "Leads Qualificados (MQLs)",
      "Leads por Canal (Org√¢nico, Pago, Refer√™ncia, Direto)",
      "Taxa de Convers√£o de Landing Pages",
      "Taxa de Convers√£o do Site",
      "CTR (Click-Through Rate)",
      "Taxa de Bounce do Site",
      "Tempo M√©dio na P√°gina",
      "Fontes de Tr√°fego (%)",
      "Engajamento nas Redes Sociais",
      "Crescimento de Seguidores",
      "Taxa de Abertura de E-mails",
      "Taxa de Cliques de E-mails (CTR)",
      "Taxa de Resposta (Outbound)",
      "Leads de Outbound Gerados",
      "Taxa de Convers√£o de Outbound"
    ]
  },
  produto: {
    title: "üß† M√©tricas de Produto / Uso",
    icon: BarChart3,
    metrics: [
      "N√∫mero de Usu√°rios Ativos Di√°rios (DAU)",
      "Usu√°rios Ativos Mensais (MAU)",
      "DAU/MAU Ratio (Indicador de Engajamento)",
      "Tempo M√©dio de Sess√£o",
      "Frequ√™ncia de Acesso",
      "N√∫mero de Acessos por Dia",
      "A√ß√µes Realizadas por Sess√£o",
      "Feature Adoption Rate (Taxa de Ado√ß√£o de Funcionalidade)",
      "Reten√ß√£o de Funcionalidade",
      "Fun√ß√µes Mais Utilizadas",
      "N√∫mero de Bugs Reportados",
      "Tempo M√©dio para Resolu√ß√£o de Bugs",
      "Net Promoter Score (NPS)",
      "Customer Satisfaction (CSAT)",
      "Customer Effort Score (CES)",
      "Taxa de Reten√ß√£o de Clientes",
      "Churn Rate (Taxa de Cancelamento)",
      "Tempo at√© o AHA Moment",
      "Percentual de Onboarding Conclu√≠do",
      "Taxa de Sucesso no Onboarding"
    ]
  },
  operacionais: {
    title: "üìä M√©tricas Operacionais",
    icon: Settings,
    metrics: [
      "Taxa de SLA Cumprido",
      "Tempo M√©dio de Resolu√ß√£o (TMR)",
      "Tempo M√©dio de Primeira Resposta",
      "N√∫mero de Chamados Abertos",
      "N√∫mero de Chamados Resolvidos",
      "Tempo M√©dio de Atendimento",
      "Volume de Chamados por Canal (WhatsApp, E-mail, Chat, Telefone)",
      "Taxa de Reabertura de Chamados",
      "Volume de Tickets por Per√≠odo (Hora/Dia/Semana)",
      "Taxa de Automa√ß√£o dos Processos",
      "Custo Operacional",
      "Efici√™ncia Operacional (Receita por Colaborador)"
    ]
  },
  customerSuccess: {
    title: "üì¶ M√©tricas de Customer Success",
    icon: Users,
    metrics: [
      "Tempo M√©dio de Ativa√ß√£o",
      "Health Score dos Clientes",
      "NPS por Cliente",
      "N√∫mero de Contatos por Cliente",
      "Taxa de Expans√£o (Expans√£o de Conta)",
      "Taxa de Upsell e Cross-sell",
      "Churn Volunt√°rio vs Involunt√°rio",
      "Tempo M√©dio de Resolu√ß√£o de Problemas",
      "Ticket M√©dio por Cliente Ativo",
      "Valor Total da Carteira por CSM",
      "Receita Protegida pelo CS",
      "N√∫mero de Interven√ß√µes do CS"
    ]
  },
  growth: {
    title: "üî• M√©tricas de Growth (Crescimento)",
    icon: Zap,
    metrics: [
      "Taxa de Crescimento Mensal de Receita",
      "Crescimento de Usu√°rios (MAU Growth)",
      "Viral Coefficient (Taxa de Viraliza√ß√£o)",
      "Tempo at√© o AHA Moment (Tempo at√© perceber valor)",
      "Taxa de Convite (Se aplic√°vel - Ex: convidar outros usu√°rios)",
      "Taxa de Compartilhamento",
      "Taxa de Upgrade de Plano",
      "Taxa de Cross-sell",
      "Reten√ß√£o de Cohort (Reten√ß√£o por grupos)",
      "Net Revenue Retention (NRR)"
    ]
  },
  tecnicas: {
    title: "üîç M√©tricas T√©cnicas / Infraestrutura",
    icon: Server,
    metrics: [
      "Tempo de Uptime (%)",
      "Tempo M√©dio de Resposta do Servidor",
      "N√∫mero de Erros 500, 404, 502",
      "Tempo M√©dio de Deploy",
      "Falhas por Deploy",
      "Uso de CPU / Mem√≥ria / Disco",
      "Lat√™ncia M√©dia dos Requests",
      "Incidentes por Per√≠odo"
    ]
  }
};

interface CustomMetricsProps {
  onNewMetric?: () => void;
}

export const CustomMetrics = ({ onNewMetric }: CustomMetricsProps) => {
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [activeTab, setActiveTab] = useState("create");
  const [metricName, setMetricName] = useState("");
  const [description, setDescription] = useState("");
  const [selectedProject, setSelectedProject] = useState("");
  const [selectedDataSources, setSelectedDataSources] = useState<string[]>([]);
  const [formula, setFormula] = useState("");
  const [selectedMetric, setSelectedMetric] = useState("");

  const handleCreateMetric = () => {
    if (!metricName || !formula) {
      toast.error("Nome e f√≥rmula s√£o obrigat√≥rios");
      return;
    }

    toast.success("M√©trica criada com sucesso!");
    setIsDialogOpen(false);
    resetForm();
    onNewMetric?.();
  };

  const resetForm = () => {
    setMetricName("");
    setDescription("");
    setSelectedProject("");
    setSelectedDataSources([]);
    setFormula("");
    setSelectedMetric("");
  };

  const insertFormulaFunction = (func: string) => {
    setFormula(prev => prev + `${func}()`);
  };

  const selectPredefinedMetric = (metricName: string) => {
    setMetricName(metricName);
    setActiveTab("create");
    toast.success(`M√©trica "${metricName}" selecionada!`);
  };

  return (
    <Card className="verdash-card">
      <CardHeader>
        <div className="flex items-center justify-between">
          <div>
            <CardTitle>M√©tricas De Custo</CardTitle>
            <CardDescription>M√©tricas personalizadas de custo por a√ß√£o</CardDescription>
          </div>
          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
            <DialogTrigger asChild>
              <Button className="verdash-btn-primary">
                <Plus className="w-4 h-4 mr-2" />
                Nova M√©trica
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-4xl max-h-[90vh] overflow-hidden bg-background/95 backdrop-blur-sm border-border">
              <DialogHeader>
                <DialogTitle className="text-foreground">Criar Nova M√©trica</DialogTitle>
                <DialogDescription className="text-muted-foreground">
                  Escolha uma m√©trica pr√©-definida ou configure uma m√©trica personalizada
                </DialogDescription>
              </DialogHeader>
              
              <Tabs value={activeTab} onValueChange={setActiveTab} className="h-full">
                <TabsList className="grid w-full grid-cols-2">
                  <TabsTrigger value="available">M√©tricas Dispon√≠veis</TabsTrigger>
                  <TabsTrigger value="create">Criar Personalizada</TabsTrigger>
                </TabsList>

                <TabsContent value="available" className="mt-6">
                  <ScrollArea className="h-[500px] pr-4">
                    <div className="space-y-6">
                      {Object.entries(availableMetrics).map(([key, category]) => (
                        <div key={key} className="space-y-3">
                          <div className="flex items-center gap-2 mb-3">
                            <category.icon className="w-5 h-5 text-primary" />
                            <h3 className="text-lg font-semibold text-foreground">{category.title}</h3>
                          </div>
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                            {category.metrics.map((metric, index) => (
                              <button
                                key={index}
                                onClick={() => selectPredefinedMetric(metric)}
                                className="text-left p-3 rounded-lg border border-border/30 hover:border-border/50 bg-card/20 hover:bg-card/40 transition-all duration-200 group"
                              >
                                <div className="flex items-center justify-between">
                                  <span className="text-sm text-foreground group-hover:text-primary transition-colors">
                                    {metric}
                                  </span>
                                  <Plus className="w-4 h-4 text-muted-foreground group-hover:text-primary transition-colors" />
                                </div>
                              </button>
                            ))}
                          </div>
                        </div>
                      ))}
                    </div>
                  </ScrollArea>
                </TabsContent>

                <TabsContent value="create" className="mt-6">
                  <ScrollArea className="h-[500px] pr-4">
                    <div className="space-y-6">
                      {/* Basic Info */}
                      <div className="space-y-4">
                        <div>
                          <Label htmlFor="metric-name" className="text-foreground">Nome da M√©trica *</Label>
                          <Input
                            id="metric-name"
                            value={metricName}
                            onChange={(e) => setMetricName(e.target.value)}
                            placeholder="Ex: CAC - Custo de Aquisi√ß√£o"
                            className="mt-1 bg-background/50 border-border"
                          />
                        </div>
                        
                        <div>
                          <Label htmlFor="metric-description" className="text-foreground">Descri√ß√£o</Label>
                          <Textarea
                            id="metric-description"
                            value={description}
                            onChange={(e) => setDescription(e.target.value)}
                            placeholder="Descreva o que esta m√©trica representa..."
                            className="mt-1 bg-background/50 border-border"
                          />
                        </div>

                        <div>
                          <Label htmlFor="metric-project" className="text-foreground">Projeto</Label>
                          <Select value={selectedProject} onValueChange={setSelectedProject}>
                            <SelectTrigger className="mt-1 bg-background/50 border-border">
                              <SelectValue placeholder="Selecione um projeto" />
                            </SelectTrigger>
                            <SelectContent className="bg-background border-border">
                              <SelectItem value="ecommerce">E-commerce Principal</SelectItem>
                              <SelectItem value="marketing">Marketing Digital</SelectItem>
                              <SelectItem value="b2b">Vendas B2B</SelectItem>
                              <SelectItem value="global">Global (Todos os projetos)</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>
                      </div>

                      {/* Data Sources */}
                      <div>
                        <Label className="text-foreground">Fontes de Dados</Label>
                        <div className="grid grid-cols-2 gap-3 mt-2">
                          {dataSources.map((source) => (
                            <div
                              key={source.id}
                              className={`p-3 rounded-lg border cursor-pointer transition-colors ${
                                selectedDataSources.includes(source.id)
                                  ? 'border-primary bg-primary/10'
                                  : 'border-border hover:bg-muted/50'
                              }`}
                              onClick={() => {
                                setSelectedDataSources(prev =>
                                  prev.includes(source.id)
                                    ? prev.filter(id => id !== source.id)
                                    : [...prev, source.id]
                                );
                              }}
                            >
                              <div className="flex items-center gap-2">
                                <span className="text-lg">{source.icon}</span>
                                <span className="text-sm font-medium text-foreground">{source.name}</span>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>

                      {/* Formula Builder */}
                      <div>
                        <Label htmlFor="formula" className="text-foreground">F√≥rmula *</Label>
                        <div className="space-y-3 mt-2">
                          {/* Function Buttons */}
                          <div className="flex flex-wrap gap-2">
                            {formulaFunctions.map((func) => (
                              <Button
                                key={func}
                                type="button"
                                variant="outline"
                                size="sm"
                                onClick={() => insertFormulaFunction(func)}
                                className="text-xs"
                              >
                                {func}
                              </Button>
                            ))}
                          </div>

                          {/* Formula Input */}
                          <Textarea
                            id="formula"
                            value={formula}
                            onChange={(e) => setFormula(e.target.value)}
                            placeholder="Ex: SUM(marketing_spend) / COUNT(new_customers)"
                            className="font-mono text-sm bg-background/50 border-border"
                            rows={4}
                          />
                          
                          <p className="text-xs text-muted-foreground">
                            Use as fun√ß√µes acima ou digite sua pr√≥pria f√≥rmula. Voc√™ pode referenciar campos das fontes de dados selecionadas.
                          </p>
                        </div>
                      </div>

                      {/* Actions */}
                      <div className="flex gap-3 pt-4">
                        <Button onClick={handleCreateMetric} className="flex-1 verdash-gradient">
                          <Calculator className="w-4 h-4 mr-2" />
                          Criar M√©trica
                        </Button>
                        <Button variant="outline" onClick={() => setIsDialogOpen(false)}>
                          Cancelar
                        </Button>
                      </div>
                    </div>
                  </ScrollArea>
                </TabsContent>
              </Tabs>
            </DialogContent>
          </Dialog>
        </div>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {customMetrics.map((metric, index) => (
            <div key={index} className="p-4 rounded-lg border border-border/30 hover:border-border/50 bg-card/20 hover:bg-card/40 verdash-animate">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 rounded-lg bg-gradient-to-br from-verdash-blue to-verdash-cyan flex items-center justify-center">
                  <Target className="w-5 h-5 text-white" />
                </div>
                <div className="flex-1">
                  <p className="text-sm text-muted-foreground">{metric.name}</p>
                  <p className="text-xl font-bold text-foreground">{metric.value}</p>
                </div>
              </div>
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  );
};
